#!/usr/bin/env python
PACKAGE = "oculus_sonar"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# const values are taken from oculus_SDK Oculus.h

# Frequency of the ping (1.2Mhz or 2.1Mz)
frequency_mode = gen.enum([
    gen.const("FrequencyLow",  int_t, 1, "Low frequency (1.2MHz, wide aperture)."),
    gen.const("FrequencyHigh", int_t, 2, "High frequency (2.1Mhz, narrow aperture).")],
    "Sonar beam frequency mode.")
gen.add("frequency_mode", int_t, 0, "Sonar beam frequency mode.",
        default=1, min=1, max=2, edit_method=frequency_mode)

# Number of pings per second
ping_rate = gen.enum([
    gen.const("PingRateNormal",  int_t, 0, "10Hz max ping rate."),
    gen.const("PingRateHigh",    int_t, 1, "15Hz max ping rate."),
    gen.const("PingRateHighest", int_t, 2, "40Hz max ping rate."),
    gen.const("PingRateLow",     int_t, 3, "5Hz max ping rate."),
    gen.const("PingRateLowest",  int_t, 4, "2Hz max ping rate."),
    gen.const("NoPing",  int_t, 5, "Standby mode (no ping fire).")],
    "Frequency of ping fires.")
gen.add("ping_rate", int_t, 0, "Frequency of ping fires.",
        default=0, min=0, max=5, edit_method=ping_rate)

# # Hint on available network speed (no feedback, sonar seems to ignore it)
# gen.add("network_speed", int_t, 0, "Hint on network available speed ?.", 
#         default=255, min=0, max=255)

# Set to non-configurable (by choice)
# # the next 3 parameters are used to fill the OculusFireMessage.flags parameter
# # For now only compatible with SimplePingResult
# range_type = gen.enum([gen.const("Percents", int_t, 0, "Interpret range in percents."),
#                        gen.const("Meters",   int_t, 1, "Interpret range in meters")],
#                        "Range unit type.");
# gen.add("range_type", int_t, 0, "Range unit type.",
#         default=1, min =0, max=1, edit_method=range_type)

data_depth = gen.enum([gen.const("8bits",  int_t, 0, "Ping data encoded on 8bits."),
                       gen.const("16bits", int_t, 1, "Ping data encoded on 16bits.")],
                       "Ping data encoding bit count.");
gen.add("data_depth", int_t, 0, "Encoding of ping data.",
        default=0, min=0, max=1, edit_method=data_depth)

nbeams = gen.enum([gen.const("256beams", int_t, 0, "Oculus outputs 256 beams."),
                   gen.const("512beams", int_t, 1, "Oculus outputs 512 beams.")],
                   "Number of ping beams.");
gen.add("nbeams", int_t, 0, "Number of beams.",
        default=0, min=0, max=1, edit_method=nbeams)

gen.add("send_gain",   bool_t, 0, "Send range gain with data.",  default=False)
gen.add("gain_assist", bool_t, 0, "Enable auto gain.",           default=False)
# gen.add("full_ping",   bool_t, 0, "Send full ping message.",     default=False)

gen.add("range", double_t, 0, "Sonar range (in meters)",
        default=3.0, min=0.3, max=40.0)

# These parameters are for scaling data (investigate)
gen.add("gamma_correction", int_t, 0, "Gamma correction",
        default=127, min=0, max=255)
gen.add("gain_percent", double_t, 0, "Gain percentage (%)",
        default=50.0, min=0.1, max=100.0)

gen.add("sound_speed", double_t, 0, "Sound speed (in m/s, set to 0 for it to be calculated using salinity).",
        default=0.0, min=1400.0, max=1600.0)
gen.add("use_salinity", bool_t, 0, "Use salinity to calculate sound_speed.",  default=True)
gen.add("salinity", double_t, 0, "Salinity (in parts per thousand (ppt,ppm,g/kg), used to calculate sound speed if needed.",
        default=0.0, min=0.0, max=100)

exit(gen.generate(PACKAGE, "oculus_sonar", "OculusSonar"))


